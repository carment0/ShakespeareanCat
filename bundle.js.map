{"version":3,"sources":["webpack:///webpack/bootstrap 71aa672ec1c864f1ae56","webpack:///./main.js","webpack:///./population.js","webpack:///./dna.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;AAEA;AACA,yDAAyD;AACzD,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 71aa672ec1c864f1ae56","import Population from './population';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  document.getElementById(\"start\").onclick = function() {new Main;};\n});\n\n\nclass Main {\n  constructor(target = \"To meow, or not to meow\",\n            population = 200, mutation = 1) {\n    this.target = target;\n    this.population = population;\n    this.mutation = mutation;\n\n    let create = new Population(this.target, this.mutation, this.population);\n    console.log(create);\n    this.draw(create);\n  }\n\n  draw(population) {\n    // console.log(population);\n    console.log(population.isPhraseFound());\n    while (!population.isPhraseFound()) {\n      population.naturalSelection();\n      population.generate();\n      population.updateBestFitnessAndPhrase();\n      population.getGeneration();\n      population.getAverageFitness();\n    }\n    population.getBestPhrase();\n    console.log(population.getBestFitness());\n  }\n\n\n}\n\nexport default Main;\n// module.exports = Evolution;\n\n// function renderRow(phrase) {\n//   const table = document.getElementById('table');\n//   const newTableRow = document.createElement('tr');\n//\n//   const tableData1 = document.createElement('td');\n//   tableData1.appendChild(document.createTextNode('1'));\n//\n//   const tableData2 = document.createElement('td');\n//   tableData2.appendChild(document.createTextNode('24%'));\n//\n//   const tableData3 = document.createElement('td');\n//   tableData3.appendChild(document.createTextNode(phrase));\n//\n//   newTableRow.appendChild(tableData1);\n//   newTableRow.appendChild(tableData2);\n//   newTableRow.appendChild(tableData3);\n//\n//   table.appendChild(newTableRow);\n// }\n//\n// renderRow(\"Hello World\");\n// renderRow(\"Again\");\n// renderRow(\"Again and again\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./main.js\n// module id = 0\n// module chunks = 0","import DNA from './dna';\n\nclass Population {\n  constructor(targetPhrase, mutationPercentage, populationSize) {\n    this.targetPhrase = targetPhrase;\n    this.mutationRate = mutationPercentage / 100;\n    this.populationSize = populationSize;\n    this.currentPopulation = [];\n    this.potentialParents = [];\n    this.completed = false;\n    this.generation = 0;\n    this.bestPhrase = \"\";\n    this.bestFitness = 0;\n    this.topBestPhrase = [];\n\n    this.createPopulation();\n    this.calcPopFitness();\n    this.updateBestFitnessAndPhrase();\n  }\n\n  createPopulation() {\n    for (let i = 0; i < this.populationSize; i++) {\n      let dna = new DNA(this.targetPhrase.length);\n      this.currentPopulation.push(dna);\n    }\n  }\n\n  calcPopFitness() {\n    let target = this.targetPhrase;\n    this.currentPopulation.forEach((phrase) => {\n      phrase.calculateFitness(target);\n    });\n    return this;\n  }\n\n  updateBestFitnessAndPhrase() {\n    this.bestFitness = 0;\n    this.bestPhrase = \"\";\n    this.currentPopulation.forEach((phrase, idx) => {\n      if (phrase.fitness > this.bestFitness) {\n\n        this.bestFitness = phrase.fitness;\n        this.bestPhrase = this.currentPopulation[idx].getPhrase();\n        console.log(\"target:\" + phrase.getPhrase());\n        console.log(this.targetPhrase);\n        if (phrase.getPhrase() === this.targetPhrase) {\n          console.log(\"completed is true\");\n          this.completed = true;\n        }\n      }\n    });\n  }\n\n  naturalSelection() {\n    this.potentialParents = [];\n\n    this.currentPopulation.forEach((phrase) => {\n      let n = Math.floor(phrase.fitness);\n      if (n < 1) n = 1;\n      for (let i = 0; i < n; i++) {\n        this.potentialParents.push(phrase);\n      }\n    });\n    return this;\n  }\n\n  generate() {\n    let matingPool = this.potentialParents;\n    let matingPop = this.potentialParents.length;\n    for (let i = 0; i < this.populationSize; i++) {\n      let parentOneIdx = Math.floor(Math.random() * matingPop) + 0;\n      let parentTwoIdx = Math.floor(Math.random() * matingPop) + 0;\n      let parentA = this.potentialParents[parentOneIdx];\n      let parentB = this.potentialParents[parentTwoIdx];\n      let offspring = parentA.crossover(parentB);\n\n      offspring = offspring.mutation(this.mutationRate);\n\n      this.currentPopulation[i] = offspring;\n    }\n    this.calcPopFitness();\n    this.updateBestFitnessAndPhrase();\n    this.updateTopPhraseAndGen();\n    this.generation++;\n    return this;\n  }\n\n  updateTopPhraseAndGen() {\n    if (this.topBestPhrase.length === 30) {\n      this.topBestPhrase.pop();\n      this.topBestPhrase.unshift(this.bestPhrase);\n    } else {\n      this.topBestPhrase.unshift(this.bestPhrase);\n    }\n    console.log(this.topBestPhrase);\n  }\n\n  updateTable() {\n    this.topBestPhrase.forEach((phrase) => {\n\n    });\n  }\n\n  isPhraseFound() {\n    return this.completed;\n  }\n\n  getGeneration() {\n    return this.generation;\n  }\n\n  getBestPhrase() {\n    return this.bestPhrase;\n  }\n\n  getBestFitness() {\n    document.getElementById(\"updated-gen\").innerHTML = this.generation;\n    return this.bestFitness;\n  }\n\n  getAverageFitness() {\n    let totalFitness = 0;\n    this.currentPopulation.forEach((phrase) => {\n      totalFitness += phrase.fitness;\n    });\n\n    let total = totalFitness / this.populationSize;\n    document.getElementById(\"updated-fitness\").innerHTML = total + \"%\";\n  }\n\n  getAllPhrase() {\n    let allPhrases = '';\n    this.currentPopulation.forEach(function (phrase, idx) {\n      allPhrases += phrase.getPhrase() + '\\n';\n    });\n    return allPhrases;\n  }\n}\n\nexport default Population;\n\n//testing\n// let a = new Population(\"helfsmjfhksdhlfl askjhlo\", 1, 100);\n// console.log(a);\n// console.log(a.naturalSelection());\n// console.log(a.generate());\n// console.log(a.naturalSelection());\n// console.log(a.generate());\n// console.log(a.getAllPhrase());\n// console.log(a.getAverageFitness());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./population.js\n// module id = 1\n// module chunks = 0","// object that stores the genetic information for a member of the population\n// population will be an array of DNA objects\nclass DNA {\n  constructor(num) {\n    this.genes = [];\n    this.fitness = 0;\n    for (let i = 0; i < num; i++) {\n      let randomChar = Math.floor(Math.random() * 126) + 32;\n      this.genes[i] = String.fromCharCode(randomChar);\n    }}\n\n  calculateFitness(target) {\n    let score = 0;\n    for (let i = 0; i < this.genes.length; i++) {\n      if (this.genes[i] === target.charAt(i)) {\n        score++;\n      }\n    }\n    this.fitness = (score / target.length) * 100;\n    return this.fitness;\n  }\n\n  getPhrase() {\n    return this.genes.join(\"\");\n  }\n\n  crossover(partner) {\n    let geneLength = this.genes.length;\n    let offspring = new DNA(geneLength);\n    let divider = Math.floor(Math.random() * (geneLength - 0)) + 0;\n\n    for (let i = 0; i < geneLength; i++) {\n      if (i < divider) {\n        offspring.genes[i] = this.genes[i];\n      } else {\n        offspring.genes[i] = partner.genes[i];\n      }\n    }\n    return offspring;\n  }\n\n  mutation(mutationRate) {\n    for (let i = 0; i < this.genes.length; i++) {\n      if (Math.random() < mutationRate) {\n        let randomChar = Math.floor(Math.random() * 126) + 32;\n        this.genes[i] = String.fromCharCode(randomChar);\n      }\n    }\n    return this;\n  }\n}\n\nexport default DNA;\n\n// testing\n// let a = new DNA(5);\n// let b = new DNA(5);\n// console.log(a);\n// console.log(b);\n// console.log(\"fitness: \" + a.calculateFitness(\"hello\"));\n// // console.log(a);\n// console.log(\"phrase: \" + a.getPhrase());\n// console.log(\"crossover: \" + a.crossover(b));\n// let c = a.crossover(b);\n// console.log(\"mutation: \" + c.mutation(0.60));\n// // console.log(a);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dna.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}